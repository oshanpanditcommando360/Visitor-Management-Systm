// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
  binaryTargets = ["native", "linux-musl", "rhel-openssl-3.0.x"]
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Client {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  phone     String
  password  String
  department Department
  visitors  Visitor[] @relation("ClientVisitors")
  endUsers  EndUser[]
  createdAt DateTime  @default(now())
}

model Visitor {
  id                      String    @id @default(uuid())
  name                    String
  purpose                 String
  phone                   String?
  materialType            MaterialType?
  materialImage           String?
  isContractor            Boolean   @default(false)
  vehicleNumber           String?
  vehicleImage            String?
  scheduledEntry          DateTime?
  scheduledExit           DateTime?
  checkInTime             DateTime?
  checkOutTime            DateTime?
  requestedByGuard        Boolean      @default(false)
  requestedByEndUser     Boolean      @default(false)
  approvedByClient        Boolean?
  status                  VisitorStatus @default(PENDING)
  clientId                String
  client                  Client    @relation("ClientVisitors", fields: [clientId], references: [id])
  department              Department?
  endUserName             String?
  endUserId               String?
  endUser                 EndUser?  @relation(fields: [endUserId], references: [id])
  approvalType            ApprovalType?
  otp                     Otp?
  alerts                  Alert[]
  createdAt               DateTime @default(now())
}

model Otp {
  id          String   @id @default(uuid())
  code        String
  visitorId   String   @unique
  expiresAt   DateTime
  isUsed      Boolean  @default(false)
  visitor     Visitor  @relation(fields: [visitorId], references: [id])
  createdAt   DateTime @default(now())
}

model Alert {
  id          String   @id @default(uuid())
  visitorId   String
  type        AlertType
  message     String
  triggeredAt DateTime @default(now())
  visitor     Visitor  @relation(fields: [visitorId], references: [id])
}

enum VisitorStatus {
  PENDING
  SCHEDULED
  APPROVED
  DENIED
  CHECKED_IN
  CHECKED_OUT
  OVERSTAYED
  EXPIRED
}

enum AlertType {
  TIMEOUT
  REQUESTED
  SCHEDULED
  CHECKED_IN
  DENIED
  EXIT
}

enum Department {
  FINANCE
  ADMIN
  HR
  IT
  OPERATIONS
}

enum ApprovalType {
  CLIENT_ONLY
  END_USER_ONLY
  BOTH
}

enum MaterialType {
  NONE
  CONSTRUCTION
  ELECTRICAL
  HVAC
  IT_HARDWARE
  SAFETY_GEAR
  PLUMBING_SUPPLIES
  MAINTENANCE_SUPPLIES
  OTHER
}

model EndUser {
  id           String       @id @default(uuid())
  name         String
  email        String       @unique
  password     String
  department   Department
  post         String
  approvalType ApprovalType
  canAddVisitor Boolean @default(false)
  clientId     String
  client       Client       @relation(fields: [clientId], references: [id])
  visitors     Visitor[]
  createdAt    DateTime     @default(now())
}
